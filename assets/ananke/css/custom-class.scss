@import "tachyons-colors";

.object-fit-cover { object-fit: cover; }

.full-width {
  width: calc(100vw - var(--scrollbar-width));;
  left: 50%;
  margin-left: calc(-50vw + 0.5*var(--scrollbar-width));
}

$width-values: (60, 70, 80, 90);
@each $w in $width-values {
  .centered-#{$w}vw {
    width: calc(#{$w}vw - var(--scrollbar-width));
    left: 50%;
    margin-left: calc(-#{$w / 2}vw + 0.5*var(--scrollbar-width));
  }
}

.grid {
  display: grid;
}

$view-values: (50, 60, 70, 80, 90, 100);  // Percentages of viewport width
@each $value in $view-values {
  .w-#{$value}vw { width: calc(#{$value}vw - var(--scrollbar-width)); }
  .h-#{$value}vh { height: #{$value}vh; }

}
@media screen and (min-width: 60em) {
  @each $w in $width-values {
    .centered-#{$w}vw-l {
      width: calc(#{$w}vw - var(--scrollbar-width));
      left: 50%;
      margin-left: calc(-#{$w / 2}vw + 0.5*var(--scrollbar-width));
    }
  }
  @each $value in $view-values {
    .w-#{$value}vw-l { width: calc(#{$value}vw - var(--scrollbar-width)); }
  }
}

$y-values: (0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
$x-values: (0, 25, 50, 75, 100);
@each $y in $y-values {
  @each $x in $x-values {
    .object-position-#{$x}-#{$y} {
      object-position: #{percentage($x / 100)} #{percentage($y / 100)}; 
    }
  }
}


.grayscale-100 { filter: grayscale(100%); }
.grayscale-70 { filter: grayscale(70%); }
.grayscale-50 { filter: grayscale(50%); }

/* Base translate class */
$translate-values: (-100, -50, -40, -30, -20, -10, 10, 20, 30, 40, 50, 100);
@each $value in $translate-values {
  .translate-y-#{$value} { transform: translateY(#{percentage($value / 100)}); }
  .translate-x-#{$value} { transform: translateX(#{percentage($value / 100)}); }
}


$colors: (
  black: var(--black),
  near-black: var(--near-black),
  dark-gray: var(--dark-gray),
  mid-gray: var(--mid-gray),
  gray: var(--gray),
  silver: var(--silver),
  light-silver: var(--light-silver),
  moon-gray: var(--moon-gray),
  light-gray: var(--light-gray),
  near-white: var(--near-white),
  white: var(--white),
  
  transparent: transparent,

  // Black Opacities
  black-90: var(--black-90),
  black-80: var(--black-80),
  black-70: var(--black-70),
  black-60: var(--black-60),
  black-50: var(--black-50),
  black-40: var(--black-40),
  black-30: var(--black-30),
  black-20: var(--black-20),
  black-10: var(--black-10),
  black-05: var(--black-05),
  black-025: var(--black-025),
  black-0125: var(--black-0125),

  white-90: var(--white-90),
  white-80: var(--white-80),
  white-70: var(--white-70),
  white-60: var(--white-60),
  white-50: var(--white-50),
  white-40: var(--white-40),
  white-30: var(--white-30),
  white-20: var(--white-20),
  white-10: var(--white-10),
  white-05: var(--white-05),
  white-025: var(--white-025),
  white-0125: var(--white-0125),

  // Color palette
  dark-red: var(--dark-red),
  red: var(--red),
  light-red: var(--light-red),
  orange: var(--orange),
  gold: var(--gold),
  yellow: var(--yellow),
  light-yellow: var(--light-yellow),
  purple: var(--purple),
  light-purple: var(--light-purple),
  dark-pink: var(--dark-pink),
  hot-pink: var(--hot-pink),
  pink: var(--pink),
  light-pink: var(--light-pink),
  dark-green: var(--dark-green),
  green: var(--green),
  light-green: var(--light-green),
  navy: var(--navy),
  dark-blue: var(--dark-blue),
  blue: var(--blue),
  light-blue: var(--light-blue),
  lightest-blue: var(--lightest-blue),
  washed-blue: var(--washed-blue),
  washed-green: var(--washed-green),
  washed-yellow: var(--washed-yellow),
  washed-red: var(--washed-red)
);

// Loop through each color and each opacity level to create classes
@each $color-name, $color-value in $colors {
  .fill-#{$color-name} {
    fill: #{$color-value};
  }

  .gd-bg-#{$color-name} {
    background: linear-gradient(
      to bottom,
      rgba(0,0,0,0) 60%,
      #{$color-value} 100%
    );
  }
}
